//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.02.20 at 03:33:16 PM AWST 
//


package org.csiro.igsn.jaxb.oai.bindings.igsn;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for identifierType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="identifierType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="ARK"/>
 *     &lt;enumeration value="DOI"/>
 *     &lt;enumeration value="Handle"/>
 *     &lt;enumeration value="IGSN"/>
 *     &lt;enumeration value="ISBN"/>
 *     &lt;enumeration value="ISNI"/>
 *     &lt;enumeration value="ISSN"/>
 *     &lt;enumeration value="LSID"/>
 *     &lt;enumeration value="ORCID"/>
 *     &lt;enumeration value="PURL"/>
 *     &lt;enumeration value="URL"/>
 *     &lt;enumeration value="URN"/>
 *     &lt;enumeration value="URI"/>
 *     &lt;enumeration value="VIAF"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "identifierType")
@XmlEnum
public enum IdentifierType {

    ARK("ARK"),
    DOI("DOI"),
    @XmlEnumValue("Handle")
    HANDLE("Handle"),
    IGSN("IGSN"),
    ISBN("ISBN"),
    ISNI("ISNI"),
    ISSN("ISSN"),
    LSID("LSID"),
    ORCID("ORCID"),
    PURL("PURL"),
    URL("URL"),
    URN("URN"),
    URI("URI"),
    VIAF("VIAF");
    private final String value;

    IdentifierType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static IdentifierType fromValue(String v) {
        for (IdentifierType c: IdentifierType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
